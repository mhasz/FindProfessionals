// <auto-generated />
using System;
using FindProfessionals.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FindProfessionals.Data.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20230129202434_fix-column-password-to-nvarcharmax")]
    partial class fixcolumnpasswordtonvarcharmax
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Adresses", (string)null);
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Archive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Archives", (string)null);
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("varchar(2048)");

                    b.Property<int>("Reputation")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Professionals", (string)null);
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("JobId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Subcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostCoins")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories", (string)null);
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("JobProfessional", b =>
                {
                    b.Property<Guid>("JobsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfessionalsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobsId", "ProfessionalsId");

                    b.HasIndex("ProfessionalsId");

                    b.ToTable("JobProfessional");
                });

            modelBuilder.Entity("ProfessionalSubcategory", b =>
                {
                    b.Property<Guid>("ProfessionalsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubcategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfessionalsId", "SubcategoriesId");

                    b.HasIndex("SubcategoriesId");

                    b.ToTable("ProfessionalSubcategory");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Address", b =>
                {
                    b.HasOne("FindProfessionals.Domain.Entities.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("FindProfessionals.Domain.Entities.Address", "UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Archive", b =>
                {
                    b.HasOne("FindProfessionals.Domain.Entities.Job", "Job")
                        .WithMany("Archives")
                        .HasForeignKey("JobId")
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Client", b =>
                {
                    b.HasOne("FindProfessionals.Domain.Entities.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("FindProfessionals.Domain.Entities.Client", "UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Job", b =>
                {
                    b.HasOne("FindProfessionals.Domain.Entities.Client", "Client")
                        .WithMany("Jobs")
                        .HasForeignKey("ClientId")
                        .IsRequired();

                    b.HasOne("FindProfessionals.Domain.Entities.Subcategory", "Subcategory")
                        .WithMany("Jobs")
                        .HasForeignKey("SubcategoryId")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Professional", b =>
                {
                    b.HasOne("FindProfessionals.Domain.Entities.Category", "Category")
                        .WithMany("Professionals")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("FindProfessionals.Domain.Entities.User", "User")
                        .WithOne("Professional")
                        .HasForeignKey("FindProfessionals.Domain.Entities.Professional", "UserId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Rating", b =>
                {
                    b.HasOne("FindProfessionals.Domain.Entities.Client", "Client")
                        .WithMany("Ratings")
                        .HasForeignKey("ClientId")
                        .IsRequired();

                    b.HasOne("FindProfessionals.Domain.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .IsRequired();

                    b.HasOne("FindProfessionals.Domain.Entities.Professional", "Professional")
                        .WithMany("Ratings")
                        .HasForeignKey("ProfessionalId")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Job");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Subcategory", b =>
                {
                    b.HasOne("FindProfessionals.Domain.Entities.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JobProfessional", b =>
                {
                    b.HasOne("FindProfessionals.Domain.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("JobsId")
                        .IsRequired();

                    b.HasOne("FindProfessionals.Domain.Entities.Professional", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsId")
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessionalSubcategory", b =>
                {
                    b.HasOne("FindProfessionals.Domain.Entities.Professional", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsId")
                        .IsRequired();

                    b.HasOne("FindProfessionals.Domain.Entities.Subcategory", null)
                        .WithMany()
                        .HasForeignKey("SubcategoriesId")
                        .IsRequired();
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Category", b =>
                {
                    b.Navigation("Professionals");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Client", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Job", b =>
                {
                    b.Navigation("Archives");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Professional", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.Subcategory", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("FindProfessionals.Domain.Entities.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("Professional");
                });
#pragma warning restore 612, 618
        }
    }
}
